# -*- coding: utf-8 -*-
"""festival_processing.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NnUdWSIUNLRY4O9PmcX5GFgeaTekcO7c
"""

# 1. 구글 드라이브 마운트
from google.colab import drive
drive.mount('/content/drive')


# 2. CSV 파일 경로 지정
file_path = '/content/drive/MyDrive/Colab Notebooks/BigContest_2025/festival_df.csv'

# 3. 데이터 불러오기
import pandas as pd
festival_df = pd.read_csv(file_path, encoding='utf-8')

# 4. 데이터 확인
print("===== 데이터 정보 =====")
print(festival_df.info())
print("\n===== 데이터 샘플 =====")
print(festival_df.head())
print("\n===== 기본 통계 =====")
print(festival_df.describe())

"""- 주요 성별

- 주요 나이
"""

# 주요 성별
# 남/여 컬럼 리스트
male_cols = [c for c in festival_df.columns if '남성비율' in c]
female_cols = [c for c in festival_df.columns if '여성비율' in c]

# 남성/여성 비율 합 계산 - 남성+여성이 100%인지 체크
festival_df['남성합'] = festival_df[male_cols].sum(axis=1)
festival_df['여성합'] = festival_df[female_cols].sum(axis=1)
festival_df['남녀합계'] = festival_df['남성합'] + festival_df['여성합']

# 합계가 100 근처인지 확인
print(festival_df[['축제명', '남성합', '여성합', '남녀합계']].head())

import numpy as np

# 1️⃣ 주요 성별 컬럼 추가
festival_df['주요성별'] = np.where(
    festival_df['남성합'] > festival_df['여성합'], '남성', '여성'
)

# 2️⃣ 주요 연령대 컬럼 추가
age_groups = ['09세', '1019세', '2029세', '3039세', '4049세', '5059세', '6069세', '70세이상']

# 각 연령대별 남+여 합 계산
for age in age_groups:
    festival_df[f'연령대_{age}_합'] = (
        festival_df[f'남성비율_{age}'] + festival_df[f'여성비율_{age}']
    )

# 각 행별로 가장 큰 연령대 찾기 (NaN 방어 포함)
festival_df['주요연령대'] = (
    festival_df[[f'연령대_{age}_합' for age in age_groups]]
    .fillna(0)
    .idxmax(axis=1)
    .str.replace('연령대_', '', regex=False)
    .str.replace('_합', '', regex=False)
)

# 3️⃣ 중간 계산 컬럼(연령대_*_합)은 정리해서 제거 가능
festival_df.drop(columns=[f'연령대_{age}_합' for age in age_groups], inplace=True)

# ✅ 결과 미리보기
print(festival_df[['축제명', '주요성별', '주요연령대']].head())
print('--------------------------------------------')
print(festival_df[['축제명', '주요성별', '주요연령대']].tail())

festival_df

"""- 주요 고객층(성별+연령)"""

# 남/여 각 연령대 컬럼 리스트
gender_age_cols = [f'남성비율_{age}' for age in age_groups] + [f'여성비율_{age}' for age in age_groups]

def find_key_customer(row):
    # 해당 행에서 최대값을 가지는 컬럼 찾기
    max_col = row[gender_age_cols].idxmax()

    # 컬럼명에서 성별과 나이 추출
    gender, age = max_col.split('_')

    # 나이 표현
    if age == '70세이상':
        age_str = '70세 이상'
    else:
        age_str = age[:2] + '~' + age[2:]

    return f"{gender} {age_str}"

festival_df['주요고객층'] = festival_df.apply(find_key_customer, axis=1)

# 결과 확인
print(festival_df[['축제명', '주요고객층']].head())

"""- 주요 방문자(현지인/외지인)"""

# 연도별 현지인 방문자 수 합계
local_cols = ['2018_(현지인)방문자수', '2019_(현지인)방문자수',
              '2022_(현지인)방문자수', '2023_(현지인)방문자수',
              '2024_(현지인)방문자수']

# 연도별 외부 방문자 수 합계 (외지인 + 외국인)
outside_cols = ['2018_(외지인)방문자수', '2019_(외지인)방문자수',
                '2022_(외지인)방문자수', '2023_(외지인)방문자수',
                '2024_(외지인)방문자수']

foreign_cols = ['2018_(외국인)방문자수', '2019_(외국인)방문자수',
                '2022_(외국인)방문자수', '2023_(외국인)방문자수',
                '2024_(외국인)방문자수']

festival_df['총현지인'] = festival_df[local_cols].sum(axis=1)
festival_df['총외부방문자'] = festival_df[outside_cols + foreign_cols].sum(axis=1)

# 주요 방문자 판단
festival_df['주요방문자'] = np.where(
    festival_df['총현지인'] >= festival_df['총외부방문자'],
    '현지인',
    '외부방문자'
)

# 중간 합계 컬럼 삭제
festival_df.drop(columns=['총현지인', '총외부방문자'], inplace=True)

# 결과 확인
print(festival_df[['축제명', '주요방문자']])

festival_df.columns

"""- 축제 인기

  - 전체 방문자수(전체방문자수)
  - 일평균 방문자수
  - 축제기간 내비게이션 검색량
  - 축제기간 관광 소비

  위 컬럼 이용해서 인기 계산

  1) 연도별 데이터를 바탕으로 모든 지표를 계산
  2) 각 연도별 지표를 표준화 -> 점수화하고 평균 내서 하나의 종합 '인기 점수'를 생성
  3) 종합 인기 점수를 기준으로 '상/중/하' 등급 나눔
"""

import numpy as np
from sklearn.preprocessing import MinMaxScaler

# 1️⃣ 인기 지표 컬럼 정의 (연도별 방문자수, 일평균 방문자수, 검색량 등)
years = ['2018', '2019', '2022', '2023', '2024']
visitor_cols = [f'{year}_(전체)방문자수' for year in years]
daily_avg_cols = [f'{year}_일평균 방문자수' for year in years]
nav_cols = [f'{year}_축제기간_내비게이션 검색량' for year in years]

# 2️⃣ 모든 지표를 합쳐서 새로운 점수 데이터프레임 생성
score_df = festival_df[visitor_cols + daily_avg_cols + nav_cols].fillna(0)

# 3️⃣ MinMaxScaler로 0~1로 정규화
scaler = MinMaxScaler()
score_scaled = scaler.fit_transform(score_df)

# 4️⃣ 연도/지표별 점수 평균 내기
festival_df['인기도_점수'] = score_scaled.mean(axis=1)

# 5️⃣ 점수를 기준으로 등급 나누기 (상/중/하)
festival_df['축제인기'] = pd.cut(
    festival_df['인기도_점수'],
    bins=[-0.01, 0.33, 0.66, 1.01],
    labels=['하', '중', '상']
)

# ✅ 결과 미리보기
print(festival_df[['축제명', '인기도_점수', '축제인기']])

"""- 축제 인기도(상승/하락/미미)

  - 연도별 변화율의 평균으로 인기도 상승/하락/미미 결정

    - 평균이 양수 → 전체적으로 상승 추세

    -  평균이 음수 → 전체적으로 하락 추세

    - 평균이 거의 0 → 미미한 추세
"""

# 1️⃣ 연도별 인기 지표 컬럼들
pop_cols = ['전체방문자수', '일평균 방문자수', '축제기간_내비게이션 검색량', '축제기간_관광소비']

# 2️⃣ 연도 리스트 (데이터에 맞춰 조정)
years = ['2018', '2019', '2022', '2023', '2024']

# 3️⃣ 연도별 변화율 계산
trend_list = []
for idx, row in festival_df.iterrows():
    change_rates = []
    for col in pop_cols:
        year_values = [row[f'{year}_{col}'] for year in years if f'{year}_{col}' in festival_df.columns]
        # 연속된 연도 변화율 계산 ((이번연도-이전연도)/이전연도)
        for i in range(1, len(year_values)):
            prev = year_values[i-1]
            curr = year_values[i]
            if prev and not np.isnan(prev) and curr and not np.isnan(curr) and prev != 0:
                rate = (curr - prev) / prev
                change_rates.append(rate)
    # 평균 변화율 계산
    avg_rate = np.mean(change_rates) if change_rates else 0
    # 상승/하락/미미 판단 (임계값 1% 사용)
    if avg_rate > 0.01:
        trend_list.append('상승')
    elif avg_rate < -0.01:
        trend_list.append('하락')
    else:
        trend_list.append('미미')

# 4️⃣ 컬럼 추가
festival_df['축제인기도'] = trend_list

# ✅ 결과 확인
print(festival_df[['축제명', '축제인기도']])

festival_df

# CSV로 저장
festival_df.to_csv('festival_df_edit.csv', index=False, encoding='utf-8-sig')

